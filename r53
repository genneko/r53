#!/bin/sh
#
# r53 - AWS Route 53 DNS Record Updater
#
#   Prerequisite
#     awscli
#     jq
#

prog=$(basename $0)
bindir=$(dirname $(readlink -f $0))

echoerr() {
        echo "$@" >&2
}

_msg() {
        local msg="$1"
        if [ -n "$msg" ]; then
                echoerr "$msg"
        fi
}

usage_exit() {
	_msg "$1"
	echoerr "$USAGE"
	exit 1
}

USAGE="AWS Route 53 DNS Record Updater
usage:
    $prog [opts] update [-t <type>] [-T <ttl>] [-C <comment>] <name> <value>
    $prog [opts] delete [-t <type>] [-C <comment>] <name>
    $prog [opts] get [-mc] [-t <type>] <name>
    $prog [opts] list [-mc]
    $prog [opts] configure

    Default values:
      -t <type> = A
      -T <ttl> = 60
      -c <comment> = by $prog on YYYY-mm-dd HH:MM:SS

    The following global opts are available:
      -d <domain>: used to complete <name> as required
      -p <profile>: passed to awscli as --profile <profile>
      -z <zoneid>: passed to awscli as --hosted-zone-id <zoneid>
" # END-QUOTE

test -f "$HOME/.r53rc" && . "$HOME/.r53rc"

LOCKFILE=$prog.lck
PROFILE="${AWSCLI_PROFILE:-default}"
ZONEID="${HOSTED_ZONE_ID}"
DOMAIN="${HOSTED_ZONE_DOMAIN}"
DEFAULT_TYPE=A
DEFAULT_TTL=60
DEFAULT_COMMENT="by $prog on $(date '+%Y-%m-%d %H:%M:%S')"

_lock() {
	if ! ln -s $$ $LOCKFILE > /dev/null 2>&1; then
		return 1
	else
		trap '_unlock; exit 1' 1 2 3 11 15
		return 0
	fi
}

_unlock() {
	rm -f $LOCKFILE
	trap 1 2 3 11 15
}

_get_domain (){
	local id
	id=${1:-$ZONEID}
	profile=${2:-$PROFILE}
	aws --profile $profile route53 get-hosted-zone --id $id | jq -r .HostedZone.Name | sed -r 's/\.+$//'
}

_qualify() {
	local name fqdn
	name=$1
	if [ -n "$DOMAIN" ]; then
		if [ "$name" = "@" ]; then
			fqdn="$DOMAIN"
		elif echo "$name" | egrep -q "$DOMAIN"'\.*$'; then
			fqdn="$name"
		else
			fqdn=$(echo "$name" | sed -r 's/\.+$//').$DOMAIN
		fi
	else
		fqdn=""
	fi
	fqdn=$(echo "$fqdn" | sed -r 's/\.+$//').
	echo "$fqdn"
}

_get_change_status() {
	local changeid
	changeid=$1

	aws --profile $PROFILE route53 get-change --id "$changeid" | jq -r .ChangeInfo.Status
}

_wait_for_sync() {
	local changeid status _prefix

	changeid=$1
	if [ -z "$changeid" ]; then
		echoerr "Missing changeid ($changeid)."
		return 1
	fi

	_prefix=
	while true; do
		status=$(_get_change_status $changeid)
		echoerr -n ${_prefix:-"Waiting $changeid to be sync: "}$status
		_prefix=", "
		if [ "$status" = "INSYNC" ]; then
			break
		fi
		sleep 10
	done
	if [ -n "$_prefix" ]; then
		echoerr "."
	fi
}

list() {
	local OPTIND jqopt minified result
	while getopts "cm" opt
	do
		case "$opt" in
			c) jqopt="-c" ;;
			m) minified=yes ;;
			*) ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	result=$(aws --profile $PROFILE route53 list-resource-record-sets --hosted-zone-id $ZONEID)

	if [ "$minified" = "yes" ]; then
		echo "$result" | jq $jqopt -r '.ResourceRecordSets | sort_by(.Type, .Name) | .[] | [ .Name, .Type, .TTL, [.ResourceRecords[].Value]]'
	else
		echo "$result" | jq $jqopt .
	fi
}

get() {
	local OPTIND name fqdn rectype jqopt minified result
	while getopts "cmt:" opt
	do
		case "$opt" in
			c) jqopt="-c" ;;
			m) minified=yes ;;
			t) rectype=$(echo $OPTARG | tr a-z A-Z) ;;
			*) ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	name=$1
	fqdn=$(_qualify $name)
	rectype=${rectype:-$DEFAULT_TYPE}
	if [ -z "$ZONEID" -o -z "$fqdn" -o -z "$rectype" ]; then
		echoerr "Missing ZONEID ($ZONEID), fqdn ($fqdn) or rectype ($rectype)."
		return 1
	fi

	result=$(aws --profile $PROFILE route53 list-resource-record-sets --hosted-zone-id $ZONEID --query "ResourceRecordSets[?Name == '$fqdn' && Type == '$rectype'] | [0]")
	
	if [ "$minified" = "yes" ]; then
		echo "$result" | jq $jqopt -r '[ .Name, .Type, .TTL, [.ResourceRecords[].Value]]'
	else
		echo "$result" | jq $jqopt .
	fi
}

delete() {
	local OPTIND name fqdn rectype comment json record result
	while getopts "C:t:" opt
	do
		case "$opt" in
			C) comment="$OPTARG" ;;
			t) rectype=$(echo $OPTARG | tr a-z A-Z) ;;
			*) ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	name=$1
	fqdn=$(_qualify $name)
	rectype=${rectype:-$DEFAULT_TYPE}
	comment=${comment:-"DELETE $fqdn $rectype $DEFAULT_COMMENT"}
	if [ -z "$ZONEID" -o -z "$fqdn" -o -z "$rectype" ]; then
		echoerr "Missing ZONEID ($ZONEID), fqdn ($fqdn) or rectype ($rectype)."
		return 1
	fi

	record="$(get -m $fqdn $rectype)"
	if [ -z "$record" -o "$record" = "null" ]; then
		echoerr "Couldn't find $fqdn $rectype."
		return 1
	fi

	json=$(cat <<EOB
  {
    "Comment": "$comment",
    "Changes": [
      {
        "Action": "DELETE",
        "ResourceRecordSet": $record
      }
    ]
  }
EOB
)

	result=$(aws --profile $PROFILE route53 change-resource-record-sets --hosted-zone-id $ZONEID --change-batch "$json" | jq -c .)
	echo "$result"

	changeid=$(echo $result | jq -r .ChangeInfo.Id)
	_wait_for_sync $changeid
}

upsert() {
	local OPTIND name fqdn rectype ttl value comment json result changeid
	while getopts "C:t:T:" opt
	do
		case "$opt" in
			C) comment="$OPTARG" ;;
			t) rectype=$(echo $OPTARG | tr a-z A-Z) ;;
			T) ttl="$OPTARG" ;;
			*) ;;
		esac
	done
	shift $(( $OPTIND - 1 ))

	name=$1
	fqdn=$(_qualify $name)
	value=$2
	rectype=${rectype:-$DEFAULT_TYPE}
	ttl=${ttl:-$DEFAULT_TTL}
	comment=${comment:-"UPSERT $fqdn $rectype [$value] $DEFAULT_COMMENT"}
	if [ -z "$ZONEID" -o -z "$fqdn" -o -z "$value" ]; then
		echoerr "Missing ZONEID ($ZONEID), fqdn ($fqdn) or rectype ($rectype)."
		return 1
	fi

	if [ "$rectype" = "TXT" -o "$rectype" = "SPF" ]; then
		value="\\\"$value\\\""
	fi

	json=$(cat <<EOB
  {
    "Comment": "$comment",
    "Changes": [
      {
        "Action": "UPSERT",
        "ResourceRecordSet": {
          "Name": "$fqdn",
          "Type": "$rectype",
          "TTL": $ttl,
          "ResourceRecords": [
            {
              "Value": "$value"
            }
          ]
        }
      }
    ]
  }
EOB
)

	result=$(aws --profile $PROFILE route53 change-resource-record-sets --hosted-zone-id $ZONEID --change-batch "$json" | jq -c .)
	echo "$result"

	changeid=$(echo $result | jq -r .ChangeInfo.Id)
	_wait_for_sync $changeid
}

configure() {
	local zoneid profile domain yesno
	while true; do
		read -p "AWS CLI Profile [$PROFILE]: " profile
		if [ -n "${profile:=$PROFILE}" ]; then
			break
		fi
	done

	while true; do
		read -p "Hosted Zone ID [$ZONEID]: " zoneid
		if [ -n "${zoneid:=$ZONEID}" ]; then
			break
		fi
	done

	if [ -f "$HOME/.r53rc" -a -z "$DOMAIN" ]; then
		DOMAIN=$(_get_domain $zoneid $profile)
	fi

	while true; do
		read -p "Hosted Zone Domain [$DOMAIN]: " domain
		if [ -n "${domain:=$DOMAIN}" ]; then
			break
		fi
	done

	if [ -f "$HOME/.r53rc" ]; then
		read -p "Overwrite existing configuration? [N/y]: " yesno
		if echo "$yesno" | egrep -v '^[yY]' > /dev/null 2>&1; then
			echoerr "Do nothing."
		fi
	fi

	cat <<EOB> $HOME/.r53rc
AWSCLI_PROFILE=$profile
HOSTED_ZONE_ID=$zoneid
HOSTED_ZONE_DOMAIN=$domain
EOB
}

while getopts "d:p:z:" opt
do
	case "$opt" in
		d) DOMAIN="${OPTARG:-$DOMAIN}" ;;
		p) PROFILE="${OPTARG:-$PROFILE}" ;;
		z) ZONEID="${OPTARG:-$ZONEID}" ;;
		*) usage_exit ;;
	esac
done
shift $(( $OPTIND - 1 ))

command=$1
shift

case "$command" in
	update|upsert)
		if ! _lock; then
		      echoerr "Another process seems to be running. Aborting..."
		      exit 1
		fi
		upsert "$@"
		_unlock
		;;
	delete)
		if ! _lock; then
		      echoerr "Another process seems to be running. Aborting..."
		      exit 1
		fi
		delete "$@"
		_unlock
		;;
	list)
		list "$@"
		;;
	get)
		get "$@"
		;;
	testname)
		_qualify "$1"
		;;
	configure)
		configure "$@"
		;;
	*)
		usage_exit
		;;
esac

